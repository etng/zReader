// Generated by CoffeeScript 1.6.2
var Article, ArticleList, ArticleView, Feed, FeedList, Label;

_.extend(Object({
  mergeDelta: function(delta) {
    var field;

    for (field in delta) {
      delta = delta[field];
      if (_.has(this, field)) {
        this[field] = this.field + delta;
      }
    }
    return this;
  }
}));

_.mixin({
  diff: function(a, b) {
    return {
      removed: _.difference(b, a),
      added: _.difference(a, b)
    };
  }
});

App.Counters = {};

({
  getCachedItems: function(collection) {
    var cached_items, cated_item, categories, filter, i, streamId, t, _ref;

    streamId = collection.url;
    if (streamId.indexOf('stream/') === 0) {
      streamId = streamId.substring('stream/'.length);
    }
    filter = this.getStreamFilter();
    cached_items = [];
    t = parseInt($.now() / 1000);
    if (collection.length) {
      t = collection.last().get('updated');
    }
    _ref = this.cached_items;
    for (i in _ref) {
      cated_item = _ref[i];
      if (cached_item.get('updated') > t) {
        continue;
      }
      categories = cached_item.get('categories');
      if (streamId.indexOf('lable/') === 0 && !_.contains(categories, streamId)) {
        continue;
      }
      if (streamId.indexOf('feed/') === 0 && cached_item.get('origin') !== streamId) {
        continue;
      }
      if (streamId.indexOf('state/') === 0) {
        if (streamId === 'state/unread' && (cached_item.isRead() || cached_item.isMarkAsRead())) {
          continue;
        }
        if (streamId === 'state/starred' && !cached_item.isStarred()) {
          continue;
        }
      }
      if (filter === 'state/unread' && (cached_item.isRead() || cached_item.isMarkAsRead())) {
        continue;
      }
      if (filter === 'state/starred' && !cached_item.isStarred()) {
        continue;
      }
      cached_items.push(_.pick(cached_item, 'id', 'updated'));
    }
    cached_items.sort(function(a, b) {
      return b.updated - a.updated;
    });
    return _.head(cached_items, collection.page_size * 2);
  }
});

App.storage = {
  cached_items: new ArticleList([], {
    model: Article,
    url: '',
    page_size: 20,
    continuation: ''
  }),
  initialize: function() {},
  buildLabels: function(feeds) {
    var delta, feed, feed_attributes, _i, _len;

    this.lables = new LabelList();
    this.allLabel = new Label({
      'id': '***ALL***',
      'title': 'All',
      'feeds': new FeedList()
    });
    this.othersLabel = new Label({
      'id': '***OTHERS***',
      'title': 'Others',
      'feeds': new FeedList()
    });
    this.mutesLabel = new Label({
      'id': '***MUTES***',
      'title': 'Mutes',
      'feeds': new FeedList()
    });
    this.labels.add(this.allLabel.add(this.othersLabel.add(this.mutesLabel)));
    for (_i = 0, _len = feeds.length; _i < _len; _i++) {
      feed_attributes = feeds[_i];
      feed = new Feed(feed_attributes);
      delta = _.pick(feed_attributes, 'all', 'unread', 'starred', 'markasread');
      this.allLabel.add(feed);
      if (feed.mute) {
        this.mutesLabel.add(feed);
      }
      if (feed.get('categories') && feed.get('categories').length) {
        _.each(feed.get('categories'), function(category) {
          var label;

          label = labels.get(category);
          if (!label) {
            label = new Label({
              id: category,
              title: category,
              feeds: new FeedList()
            });
            this.labels.add(label);
          }
          return label.add(feed);
        });
      }
    }
    this.labels.forEach(function(label) {
      label.get('feeds').sort();
    });
    this.labels.sort();
    return this;
  },
  getFeedByStreamId: function(streamId) {
    return this.feeds.get(streamId);
  },
  getFeeds: function() {
    return this.feeds;
  },
  getLabel: function(label_name) {
    return this.labels.get(label_name);
  },
  valid_filters: ['state/reading-list', 'state/unread', 'state/starred'],
  setStreamFilter: function(name) {
    var filter;

    filter = _.contains(this.valid_filters, name) ? name : _.first(this.valid_filters);
    return localStorage.setItem('storage-stream-filter', filter);
  },
  getStreamFilter: function() {
    return localStorage.getItem('storage-stream-filter') || _.first(this.valid_filters);
  },
  setStreamId: function(streamId) {
    return localStorage.setItem('storage-stream-id', streamId);
  },
  getStreamId: function() {
    return localStorage.getItem('storage-stream-id') || _.first(this.valid_filters);
  },
  getItemsRemote: function(collection, callback) {
    var filter, p, qs, qsa, url, _i, _len,
      _this = this;

    url = '/reader/api/0/stream/contents/' + collection.url.substring('stream/'.length);
    qsa = [];
    qsa.push(['n', collection.page_size]);
    qsa.push(['ck', $.now()]);
    if (collection.continuation) {
      qsa.push(['c', collection.continuation]);
    }
    filter = this.getStreamFilter();
    if (filter && filter !== _.first(this.valid_filters)) {
      qsa.push(['filter', filter]);
    }
    qs = [];
    for (_i = 0, _len = qsa.length; _i < _len; _i++) {
      p = qsa[_i];
      qs.push("" + p[0] + "=" + p[1]);
    }
    url += '?' + qs.join('&');
    return $.ajax({
      url: url,
      type: 'POST',
      data: JSON.stringify({
        version: '1.0',
        items: this.getCachedItems(collection)
      }),
      done: function(data) {
        var article, attributes, categories, diff, i, itemIsChanged, itemsAreChanged, old_catetories, _ref;

        itemsAreChanged = false;
        _ref = data.items;
        for (i in _ref) {
          attributes = _ref[i];
          if (!attributes.cached) {
            article = new Article(attributes);
            _this.cached_items.add(article);
            collection.add(article);
            itemsAreChanged = true;
          } else {
            article = _this.cached_items.get(attributes.id);
            itemIsChanged = false;
            if (attributes.categories) {
              old_catetories = article.get('categories');
              categories = attributes.categories;
              diff = _.diff(old_catetories, categories);
              if (diff.added.length || diff.removed.length) {
                itemIsChanged = true;
              }
              if (itemIsChanged) {
                article.set({
                  categories: categories
                });
              }
            }
          }
        }
        collection.continuation = data.continuation;
        if (itemsAreChanged) {
          return _this.saveItems();
        }
      }
    });
  },
  loadSubscriptionsRemote: function() {
    var _this = this;

    return $.ajax({
      url: "/reader/api/0/subscription/list?ck=" + ($.now()),
      type: 'POST',
      done: function(data) {
        return _this.feeds.reset(data.subscriptions);
      }
    });
  },
  loadSubscriptions: function() {
    return this.feeds.reset(JSON.parse(localStorage.getItem('subscriptions')));
  },
  loadItems: function() {
    return this.cached_items.reset(JSON.parse(localStorage.getItem('items')));
  },
  saveSubscriptions: function() {
    localStorage.removeItem('subscriptions');
    return localStorage.getItem('subscriptions', JSON.stringify(this.feeds.toJSON()));
  },
  saveItems: function() {
    var items, max_cache_items;

    localStorage.removeItem('item');
    items = this.cached_items.toJSON();
    max_cache_items = 100;
    if (items.length > max_cache_items) {
      items.sort(function(a, b) {
        return b.updated - a.updated;
      });
      items.length = max_cache_items;
    }
    return localStorage.setItem('item', JSON.stringify(items));
  },
  quickSubscribe: function(query, callback) {
    return $.ajax({
      url: "/reader/api/0/subscription/quickadd?ck=" + ($.now()),
      type: 'POST',
      data: {
        "quickadd": query
      },
      done: function(data) {
        return callback && callback(data);
      }
    });
  }
};

Label = Backbone.Model.extend({
  "default": function() {},
  lock: function() {
    return this.locked = true;
  },
  isLocked: function() {
    return this.locked;
  },
  unsubscribe: function() {
    var _this = this;

    if (this.locked) {
      throw "can not unsubscribe here";
    }
    return $.ajax({
      url: "/reader/api/0/empty-tag?ck=" + ($.now()),
      type: 'POST',
      data: {
        "s": this.title
      },
      done: function(data) {
        var feed, _i, _len, _ref, _results;

        _ref = _this.get('feeds');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          feed = _ref[_i];
          _results.push(App.storage.feeds.remove(feed));
        }
        return _results;
      }
    });
  },
  rename: function(new_name) {
    var old_name,
      _this = this;

    old_name = this.get('title');
    return $.ajax({
      url: "/reader/api/0/rename-tag?ck=" + ($.now()),
      type: 'POST',
      data: {
        "s": old_name,
        "dest": new_name
      },
      done: function() {
        _this.set('title', new_name);
        return _this.get('feeds').forEach(function(feed) {
          var categories;

          categories = feed.get('categories');
          if (_.contains(categories, old_name)) {
            return categories[categories.indexOf(old_name)] = new_name;
          }
        });
      }
    });
  },
  addFeed: function(feed) {
    var delta;

    delta = _.pick(this.attributes, 'all', 'unread', 'starred', 'markasread');
    this.get('feeds').add(feed);
    this.mergeDelta(delta);
    return this;
  }
});

Feed = Backbone.Model.extend({
  defaults: {
    unread: 0,
    all: 0,
    starred: 0,
    markasread: 0,
    read: 0,
    title: '',
    mute: false
  },
  initialize: function() {
    var stat_fields,
      _this = this;

    stat_fields = {
      unread: App._('unread'),
      all: App._('all'),
      starred: App._('starred'),
      markasread: App._('markasread'),
      read: App._('read')
    };
    return this.on('change', function() {
      var delta, field, label;

      delta = {};
      for (field in stat_fields) {
        label = stat_fields[field];
        delta[field] = _this.get(field) - _this.previous(field);
      }
      App.Counters.all.mergeDelta(delta);
      if (model.mute) {
        Appl.Counters.mute.mergeDelta(delta);
      }
      if (model.get('categories') && model.get('categories').length) {
        return _.each(model.get('categories'), function(category) {
          App.Counters.category[category].mergeDelta(delta);
        });
      } else {
        return App.Counters.others.mergeDelta(delta);
      }
    });
  },
  removeLabel: function(label) {
    var _this = this;

    if (App.storage.labels.get(label).isLocked()) {
      return;
    }
    return $.ajax({
      url: "/reader/api/0/disable-tag?ck=" + ($.now()),
      type: 'POST',
      data: {
        "s": label
      },
      done: function(data) {
        var categories;

        categories = _this.get('categories');
        categories.splice(categories.indexOf(label), 1);
        return _this.set('categories');
      }
    });
  },
  markasread: function() {
    App.storage.mark(this, 'markasread');
  },
  getSortRank: function() {
    var field, rank, rank_weight, weight;

    rank_weight = {
      markasread: -1,
      read: 2,
      starred: 5
    };
    rank = 0;
    for (field in rank_weight) {
      weight = rank_weight[field];
      rank += this.get('field') * weight;
    }
    return rank;
  }
});

FeedList = Backbone.Collection.extend({
  model: Feed,
  initialize: function() {},
  comparator: function(a, b) {
    var rank_a, rank_b;

    if (a.get('mute') && !b.get('mute')) {
      return 1;
    }
    if (!a.get('mute') && b.get('mute')) {
      return -1;
    }
    if (a.get('unread') === 0 && b.get('unread') > 0) {
      return 1;
    }
    if (a.get('unread') > 0 && b.get('unread') === 0) {
      return -1;
    }
    rank_a = a.getSortRank();
    rank_b = b.getSortRank();
    if (rank_a < rank_b) {
      return 1;
    }
    if (rank_a > rank_b) {
      return -1;
    }
    if (a.get('title') === b.get('title')) {
      return 0;
    } else if (a.get('title') > b.get('title')) {
      return 1;
    } else {
      return -1;
    }
  }
});

Article = Backbone.Model.extend({
  state_read: 'state/read',
  state_markasread: 'state/markasread',
  state_starred: 'state/starred',
  setState: function(state) {
    var categories;

    switch (state) {
      case 'read':
        if (!this.isRead()) {
          categories = _.clone(this.get('categories'));
          categories.push(this.state_read);
          this.set({
            categories: categories
          });
          this.getFeed().increment('read');
        }
        break;
      case 'markasread':
        if (!this.isMarkAsRead()) {
          categories = _.clone(this.get('categories'));
          categories.push(this.state_markasread);
          this.set({
            categories: categories
          });
          this.getFeed().increment('markasread');
        }
        break;
      case 'unread':
        if (this.isMarkAsRead() || this.isRead()) {
          categories = _.clone(this.get('categories'));
          if (this.isMarkAsRead()) {
            categories.splice(categories.indexOf(this.state_markasread), 1);
          }
          if (this.isRead()) {
            categories.splice(categories.indexOf(this.state_read), 1);
          }
          this.set({
            categories: categories
          });
          this.getFeed().increment('markasread');
        }
        break;
      case 'star':
        if (!this.isStarred()) {
          categories = _.clone(this.get('categories'));
          categories.push(this.state_starred);
          this.set({
            categories: categories
          });
          this.getFeed().increment('starred');
        }
        break;
      case 'unstar':
        if (this.isStarred()) {
          categories = _.clone(this.get('categories'));
          categories.splice(categories.indexOf(this.state_starred), 1);
          this.set({
            categories: categories
          });
          this.getFeed().increment('markasread');
        }
        break;
      default:
        console.log(state);
    }
    $.ajax({
      url: "/reader/api/0/subscription/list?ck=" + ($.now()),
      type: 'POST'
    });
    if (obj instanceof Feed) {
      $.ajax({
        url: "/reader/api/0/mark-all-as-read?ck=" + ($.now()),
        type: 'POST',
        data: {
          "s": "state/reading-list"
        }
      });
    }
    return $.ajax({
      url: "/reader/api/0/edit-tag?ck=" + $.now,
      type: 'POST',
      data: {
        "a": "state/starred",
        "r": "state/starred",
        "i": obj.id
      }
    });
  },
  isRead: function() {
    return _.contains(this.get('categories'), this.state_read);
  },
  isMarkAsRead: function() {
    return _.contains(this.get('categories'), this.state_markasread);
  },
  isStarred: function() {
    return _.contains(this.get('categories'), this.state_starred);
  },
  getItemClass: function() {
    var klasses;

    klasses = [];
    if (this.isRead()) {
      klasses.push('read');
    }
    if (this.isStarred()) {
      klasses.push('starred');
    }
    if (this.isMarkAsRead()) {
      klasses.push('markasread');
    }
    return klasses.join(' ');
  }
});

ArticleList = Backbone.Collection.extend({
  model: Article,
  initialize: function(items, options) {
    var _this = this;

    this.page_size = options.page_size;
    this.continuation = options.continuation;
    this.url === options.url;
    this.loading = false;
    return this.on('article:current-change', function(id) {
      _this.currentId = id;
    });
  },
  getNext: function(id) {
    var index;

    index = -1;
    this.forEach(function(article) {
      if (article.get('id') === id) {
        index = i + 1;
        return false;
      }
    });
    if (index < 0) {
      return null;
    }
    if (index === this.length - 1) {
      this.loadMore();
    }
    return this.at(index);
  },
  getPrev: function(id) {
    var index;

    index = -1;
    this.forEach(function(article) {
      if (article.get('id') === id) {
        index = i - 1;
        return false;
      }
    });
    if (index < 0) {
      return null;
    }
    return this.at(index);
  },
  loadMore: function(onload) {
    this.loading = true;
    return App.storage.getItems(this, function() {
      this.loading = false;
      onload && onload();
    });
  },
  isLoading: function() {
    return this.loading;
  }
});

ArticleView = Backbone.Marionette.ItemView.extend({
  template: 'article-template',
  initialize: function() {},
  events: {
    'click div.article-origin': 'originClicked',
    'click a': 'linkClicked'
  },
  originClicked: function(event) {
    var origin;

    return origin = this.model.get('origin');
  },
  onRender: function() {
    this.$el.find('.article-item').toggleClass('read', this.model.isRead()).toggleClass('markasread', this.model.isMarkAsRead()).toggleClass('starred', this.model.isStarred()).find('img').removeAttr('width height');
  }
});
