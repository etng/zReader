// Generated by CoffeeScript 1.6.2
var App;

window.App = App = {
  Config: {
    resources: {
      a: {
        url: 'a',
        dependencies: [],
        cache: {
          places: ['localStorage'],
          name: 'a'
        },
        onload: function(response, resource) {
          console.log(resource.name, response);
        }
      },
      b: {
        url: 'b',
        dependencies: [],
        cache: {
          places: ['localStorage'],
          name: 'b'
        },
        onload: function(response, resource) {
          console.log(resource.name, response);
        }
      },
      c: {
        url: 'c',
        cache: {
          places: ['localStorage'],
          name: 'c'
        },
        dependencies: ['a'],
        onload: function(response, resource) {
          console.log(resource.name, response);
        }
      },
      d: {
        url: 'd',
        cache: {
          places: ['localStorage'],
          name: 'd'
        },
        dependencies: ['a', 'b', 'c'],
        onload: function(response, resource) {
          console.log(resource.name, response);
        }
      },
      e: {
        url: 'e',
        cache: {
          places: ['localStorage'],
          name: 'e'
        },
        dependencies: ['a', 'b', 'c'],
        onload: function(response, resource) {
          console.log(resource.name, response);
        }
      },
      f: {
        url: 'f',
        dependencies: ['d'],
        onload: function(response, resource) {
          console.log(resource.name, response);
        }
      }
    },
    resouce_dependency_check_interval: 200,
    load_dependencies_in_time: true
  }
};

App.cache_prefix = 'cvscr_';

App.storeData = function(name, data, places, lifetime) {
  var cache_key;

  if (!places) {
    places = ['memory', 'localStorage'];
  }
  cache_key = (App.cache_prefix + name).toUpperCase();
  if (_.contains(places, 'memory')) {
    window[cache_key] = data;
  }
  if (_.contains(places, 'localStorage') && window.localStorage) {
    localStorage.removeItem(cache_key);
    if (lifetime) {
      localStorage.setItem(cache_key, JSON.stringify({
        data: data,
        ls_expired_at: new Date().getTime() + 86400 * 1000
      }));
    } else {
      localStorage.setItem(cache_key, JSON.stringify(data));
    }
  }
};

App.fetchData = function(name, places, default_val) {
  var cache_key, decoded_data, place, serialized_data, _i, _len;

  cache_key = (App.cache_prefix + name).toUpperCase();
  if (!places) {
    places = ['memory', 'localStorage'];
  }
  for (_i = 0, _len = places.length; _i < _len; _i++) {
    place = places[_i];
    if (place === 'memory') {
      if (window[cache_key]) {
        return window[cache_key];
      }
    } else if (place === 'localStorage' && window.localStorage) {
      serialized_data = localStorage.getItem(cache_key);
      if (serialized_data) {
        decoded_data = JSON.parse(serialized_data);
      }
      if (decoded_data) {
        if (_.has(decoded_data, 'ls_expired_at')) {
          if (decoded_data.ls_expired_at < (new Date().getTime())) {
            return decoded_data.data;
          } else {
            localStorage.removeItem(cache_key);
          }
        } else {
          return decoded_data;
        }
      }
    }
  }
  return default_val;
};

App.resources_status = {};

App.loadResouce = function(resource, use_cache) {
  var dependency_resource, dependency_resource_name, from_cache, handleResponse, response, _i, _len, _ref;

  if (App.Config.load_dependencies) {
    _ref = resource.dependencies;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dependency_resource_name = _ref[_i];
      if (App.Config.resources[dependency_resource_name] && !App.resources_status[dependency_resource_name]) {
        dependency_resource = App.Config.resources[dependency_resource_name];
        dependency_resource.name = dependency_resource_name;
        App.loadResouce(dependency_resource);
      }
    }
  }
  App.resources_status[resource.name] = 'loading';
  from_cache = false;
  handleResponse = function(response) {
    var checkDependencies;

    App.resources_status[resource.name] = 'loaded';
    checkDependencies = function() {
      var dependencies_loaded, _j, _len1, _ref1;

      dependencies_loaded = true;
      _ref1 = resource.dependencies;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        dependency_resource_name = _ref1[_j];
        if (dependency_resource_name === resource.name) {
          continue;
        }
        if (!(App.resources_status[dependency_resource_name] && App.resources_status[dependency_resource_name] === 'inited')) {
          dependencies_loaded = false;
          break;
        }
      }
      if (!dependencies_loaded) {
        _.delay(checkDependencies, App.Config.resouce_dependency_check_interval);
        return;
      }
      App.resources_status[resource.name] = 'inited';
      resource.onload && resource.onload(response, resource);
      if (!from_cache && resource.cache) {
        App.storeData(resource.cache.name, response, resource.cache.places, resource.cache.lifetime);
      }
    };
    return checkDependencies();
  };
  use_cache = 1;
  if (resource.cache && use_cache) {
    response = App.fetchData(resource.cache.name, resource.cache.places);
    if (response) {
      from_cache = true;
      handleResponse(response);
      return;
    }
  }
  $.ajax({
    url: '/mock_response.php?a=' + resource.url,
    method: 'POST',
    data: resource.data ? _.result(resource, 'data') : ""
  }).done(handleResponse);
};

App.init = function() {
  var name, resource, _ref, _results;

  _ref = App.Config.resources;
  _results = [];
  for (name in _ref) {
    resource = _ref[name];
    resource.name = name;
    _results.push(App.loadResouce(resource));
  }
  return _results;
};

App.init();
